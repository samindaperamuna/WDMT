/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import data.DbConnect;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.DeflectionHeader;
import model.DeflectionRecord;
import model.MessageObserver;
import ui.tablerenderer.RowRenderer;
import util.Calc;

public class ReadingCheck extends javax.swing.JInternalFrame implements MessageObserver {

    private Map<Integer, DeflectionRecord> records;

    private static final String[] ROW_HEADERS = {
        "BDC = 1 / 2 (X + Y)",
        "TDC + BDC = (T + B)",
        "Stbd + Port = (S + P)"
    };

    public ReadingCheck(Map<Integer, DeflectionRecord> records) {
        this.records = records;
        initComponents();
        updateDataTable();
    }

    public void setRecords(Map<Integer, DeflectionRecord> records) {
        this.records = records;
    }

    private void updateDataTable() {
        int noOfCylinders;
        bottomErrorResultLabel.setText("");
        checkErrorResultLabel.setText("");

        try {
            long headId = records.get(1).getHeaderId();
            
            if (headId == 0) {
                this.dispose();
            }
            
            DeflectionHeader header = DbConnect.getDeflectionHeader(headId);
            noOfCylinders = records.size();

            ListModel<Object> listModel = new AbstractListModel<Object>() {
                @Override
                public int getSize() {
                    return ROW_HEADERS.length;
                }

                @Override
                public Object getElementAt(int index) {
                    return ROW_HEADERS[index];
                }
            };

            Object[][] data = new Object[3][noOfCylinders];
            String[] columnNames = new String[noOfCylinders];

            for (int i = 0; i < noOfCylinders; i++) {
                columnNames[i] = Integer.toString(i + 1);
            }

            DefaultTableModel tableModel = new DefaultTableModel(data, columnNames);

            dataTable.setModel(tableModel);
            dataTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

            JList<Object> rowHeader = new JList<>(listModel);
            rowHeader.setFixedCellHeight(dataTable.getRowHeight());

            rowHeader.setCellRenderer(new RowRenderer(dataTable));
            tableScrollPane.setRowHeaderView(rowHeader);

            TableModel model = dataTable.getModel();

            for (DeflectionRecord record : records.values()) {
                int col = record.getCylinderId() - 1;

                double B = Calc.getB(record.getNearBdcStbd(), record.getNearBdcPort());
                double C = Calc.getC(record.getTop(), record.getNearBdcStbd(), record.getNearBdcPort());
                double D = Calc.getD(record.getStarboard(), record.getPort());

                model.setValueAt(String.valueOf(B), 0, col);
                model.setValueAt(String.valueOf(C), 1, col);
                model.setValueAt(String.valueOf(D), 2, col);

                if (header.getBottomError() < B) {
                    bottomErrorResultLabel.setText(bottomErrorResultLabel.getText() + " " + B);
                } else if (header.getCheckError() < (C - D)) {
                    checkErrorResultLabel.setText(checkErrorResultLabel.getText() + " " + (C - D));
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(EnterData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable(){

            public boolean isCellEditable(int row, int column){
                return false;
            }

            ListModel lm=new AbstractListModel() {
                String[] Headers={"A","B","C","D"};

                @Override
                public Object getElementAt(int index) {
                    return Headers[index];
                }

                @Override
                public int getSize() {
                    return Headers.length;
                }

            };

        };
        analysysLabel = new javax.swing.JLabel();
        numberOneLabel = new javax.swing.JLabel();
        bottomErorTitleLabel = new javax.swing.JLabel();
        bottomErrorResultLabel = new javax.swing.JLabel();
        numberTwoLabel = new javax.swing.JLabel();
        checkErrorLabel = new javax.swing.JLabel();
        checkErrorResultLabel = new javax.swing.JLabel();

        setTitle("READING CHECK");
        setToolTipText("");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titlePanel.setBackground(new java.awt.Color(122, 206, 224));
        titlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titlePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(102, 0, 0));
        titleLabel.setText("Check for Readings");
        titlePanel.add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 180, 30));

        getContentPane().add(titlePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 40));

        tableScrollPane.setViewportView(dataTable);

        getContentPane().add(tableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1170, 150));

        analysysLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analysysLabel.setForeground(new java.awt.Color(102, 0, 0));
        analysysLabel.setText("Analysis:");
        getContentPane().add(analysysLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 90, 30));

        numberOneLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numberOneLabel.setForeground(new java.awt.Color(102, 0, 0));
        numberOneLabel.setText("(1)");
        getContentPane().add(numberOneLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 30, 20));

        bottomErorTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bottomErorTitleLabel.setForeground(new java.awt.Color(102, 0, 0));
        bottomErorTitleLabel.setText("In the B Row following bearing  values are exceding the maximum. So rechecking of the readings required.");
        bottomErorTitleLabel.setToolTipText("");
        getContentPane().add(bottomErorTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 680, 20));

        bottomErrorResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bottomErrorResultLabel.setForeground(new java.awt.Color(102, 0, 0));
        bottomErrorResultLabel.setText("Result :");
        bottomErrorResultLabel.setToolTipText("");
        getContentPane().add(bottomErrorResultLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 300, 60, 20));

        numberTwoLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numberTwoLabel.setForeground(new java.awt.Color(102, 0, 0));
        numberTwoLabel.setText("(2)");
        getContentPane().add(numberTwoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, 30, 20));

        checkErrorLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkErrorLabel.setForeground(new java.awt.Color(102, 0, 0));
        checkErrorLabel.setText("<html>By Comparing values from C and D, the following units are exceding the maximum. This indiactes either a worng reading which requires </br> rechecking or these unit bearnings or crankshafts require attention and continuous monitoring. </html>");
        getContentPane().add(checkErrorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, 1090, 40));

        checkErrorResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkErrorResultLabel.setForeground(new java.awt.Color(102, 0, 0));
        checkErrorResultLabel.setText("Result :");
        checkErrorResultLabel.setToolTipText("");
        getContentPane().add(checkErrorResultLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 60, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel analysysLabel;
    private javax.swing.JLabel bottomErorTitleLabel;
    private javax.swing.JLabel bottomErrorResultLabel;
    private javax.swing.JLabel checkErrorLabel;
    private javax.swing.JLabel checkErrorResultLabel;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel numberOneLabel;
    private javax.swing.JLabel numberTwoLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
        updateDataTable();
    }
}
